{"name":"Pod","tagline":"Git push deploy for Node.js","body":"# POD - git push deploy for Node.js [![Build Status](https://travis-ci.org/yyx990803/pod.png?branch=master)](https://travis-ci.org/yyx990803/pod)\r\n\r\n![screenshot](http://i.imgur.com/dMcKWiJ.png)\r\n\r\nCore API JSCoverage: **95.72%**\r\n\r\nPod simplifies the workflow of setting up, updating and managing multiple Node.js apps on a Linux server. Perfect for hosting personal Node stuff on a VPS. There are essentially two parts: 1. `git push` deploy (by using git hooks) and 2. process management (by using [pm2](https://github.com/Unitech/pm2))\r\n\r\nIt doesn't manage DNS routing for you (personally I'm doing that in Nginx) but you can use pod to run a [node-http-proxy](https://github.com/nodejitsu/node-http-proxy) server on port 80 that routes incoming requests to other apps.\r\n\r\n## Prerequisites\r\n\r\n- Node >= 0.8.x\r\n- git\r\n- properly set up ssh so you can push to a repo on the VPS via ssh\r\n\r\n## Example Workflow\r\n\r\n**On the server:**\r\n\r\n``` bash\r\n$ pod create myapp\r\n```\r\n\r\n**On your local machine:**\r\n\r\n``` bash\r\n$ git clone ssh://your-server/pod_dir/myapp.git\r\n# hack hack hack, commit\r\n$ git push\r\n```\r\n\r\n**Or, if you have an existing local repo:**\r\n\r\n``` bash\r\n$ git remote add deploy ssh://your-server/pod_dir/myapp.git\r\n$ git push deploy master\r\n```\r\n\r\nThat's it! App should be automatically running after the push. For later pushes, app process will be restarted.\r\n\r\n## Installation\r\n\r\n``` bash\r\n$ [sudo] npm install -g pod\r\n```\r\n\r\nTo make pod auto start all managed apps on system startup, you might also want to write a simple [upstart](http://upstart.ubuntu.com) script that contains something like this:\r\n\r\n``` bash\r\n# /etc/init/pod.conf\r\nstart on startup\r\nexec sudo -u <username> /path/to/node /path/to/pod startall\r\n```\r\n\r\nThe first time you run `pod` it will ask you where you want to put your stuff. The structure of the given directory will look like this:\r\n\r\n``` bash\r\n.\r\n├── repos # holds the bare .git repos\r\n│   └── example.git\r\n└── apps # holds the working copies\r\n    └── example\r\n        ├──app.js\r\n        └──.podhook\r\n```\r\n\r\n## CLI Usage\r\n\r\n```\r\n\r\n  Usage: pod [command]\r\n\r\n  Commands:\r\n\r\n    create <app>            Create a new app\r\n    rm <app>                Delete an app\r\n    start <app>             Start an app monitored by pm2\r\n    stop <app>              Stop an app\r\n    restart <app>           Restart an app that's already running\r\n    list                    List apps and status\r\n    startall                Start all apps not already running\r\n    stopall                 Stop all apps\r\n    restartall              Restart all running apps\r\n    edit <app>              Edit the app's post-receive hook\r\n    config                  Edit config file\r\n    help                    You are reading it right now\r\n\r\n```\r\n\r\n## Config\r\n\r\nExample Config:\r\n\r\n``` js\r\n{\r\n    \"root\": \"/srv\",\r\n    \"nodeEnv\": \"development\",\r\n    \"defaultScript\": \"app.js\", // this can be overwritten in each app's package.json's \"main\" field\r\n    \"editor\": \"vi\",\r\n    \"apps\": {\r\n        \"example1\": {\r\n\r\n            // passed to the app as process.env.NODE_ENV\r\n            // if not set, will inherit from global settings\r\n            \"nodeEnv\": \"production\",\r\n\r\n            // passed to the app as process.env.PORT\r\n            // if not set, pod will try to sniff from app's\r\n            // main file (for displaying only), but not\r\n            // guarunteed to be correct.\r\n            \"port\": 8080,\r\n\r\n            // *** any valid pm2 config here gets passed to pm2. ***\r\n\r\n            // spin up 2 instances using cluster module\r\n            \"instances\": 2\r\n\r\n            // pass in additional command line args to the app\r\n            \"args\": \"['--toto=heya coco', '-d', '1']\",\r\n\r\n            // file paths for stdout, stderr logs and pid.\r\n            // will be in ~/.pm2/ if not specified\r\n            \"fileOutput\": \"/absolute/path/to/stdout.log\",\r\n            \"fileError\": \"/absolute/path/to/stderr.log\",\r\n            \"pidFile\": \"/absolute/path/to/example1.pid\"\r\n        },\r\n        \"example2\": {\r\n\r\n            // minimum uptime to be considered stable,\r\n            // in milliseconds. If not set, all restarts\r\n            // are considered unstable.\r\n            \"minUptime\": 3600000,\r\n\r\n            // max times of unstable restarts allowed\r\n            // before the app is auto stopped.\r\n            \"maxRestarts\": 10\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Logging & Monitoring\r\n\r\nSince pod uses pm2 under the hood, logging is delegated to `pm2`. It's recommended to link `path/to/pod/node_modules/pm2/bin/pm2` to your `/usr/local/bin` so that you can use `pm2 monit` and `pm2 logs` to analyze more detailed app info. Note that all pod commands only concerns apps present in pod's config file, so it's fine if you use pm2 separately to run additional processes.\r\n\r\n## Custom post-receive hook\r\n\r\nYou can edit the post-receive script of an app using `pod edit <appname>` to customize the actions after a git push.\r\n\r\nOr, if you prefer to include the hook with the repo, just place a `.podhook` file in your app, which can contain shell scripts that will be executed after push, and before restarting the app. If `.podhook` exits with code other than 0, the app will not be restarted and will hard reset to the commit before the push.\r\n\r\nExample `.podhook`:\r\n\r\n``` bash\r\ncomponent install\r\nnpm install\r\ngrunt build\r\ngrunt test\r\npassed=$?\r\nif [[ $passed != 0 ]]; then\r\n    # test failed, exit. app's working tree on the server will be reset.\r\n    exit $passed\r\nfi\r\n```\r\n\r\n## Using the API\r\n\r\nNOTE: the API can only be used after POD has been initiated via the command line.\r\n\r\n`require('pod')` will return the API. For now you'll have to refer to the source before further documentation becomes available.\r\n\r\n## License\r\n\r\n[MIT](http://opensource.org/licenses/MIT)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}