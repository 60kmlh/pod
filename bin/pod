#!/usr/bin/env node

var fs      = require('fs'),
    exec    = require('child_process').exec,
    spawn   = require('child_process').spawn,
    path    = require('path'),
    argv    = require('optimist').argv,
    colors  = require('colors'),
    cwd     = process.cwd()
    
// lazy load so commands that doesn't need it runs faster
var forever,
    foreverTasks = [
        'rm',
        'list',
        'procs',
        'start',
        'stop',
        'restart',
        'startall',
        'stopall',
        'restartall'
    ]

var globalConfig = {},
    globalConfigDirPath = process.env.HOME + '/.podconfig',
    globalConfigPath = globalConfigDirPath + '/global.json'

var pod = {

    help: function () {
        console.log(fs.readFileSync(__dirname + '/../help/usage', 'utf-8'))
    },

    config: function (appname) {
        if (argv.reset) {
            initConfig()
        } else {
            edit(
                appname
                ? getAppInfo(appname).configPath
                : globalConfigPath
            )
        }
    },

    create: function (appname) {
        if (!appname) return

        var app = getAppInfo(appname, true)

        if (fs.existsSync(app.configPath)) {
            warn('an app with that name already exists.')
            return
        }

        // create config file
        var appConf = {
            env: argv.env ? argv.env : '',
            port: argv.port ? argv.port : ''
        }
        fs.writeFile(app.configPath, JSON.stringify(appConf, null, 4), function(err) {
            if (err) console.error(err)
        })

        // create log folder
        fs.mkdir(app.logPath, function (err) {
            if (err) {
                console.error(err)
            } else {
                log('create logs dir at ' + app.logPath.yellow)
            }
        })
        
        // setup bare git repo
        fs.mkdirSync(app.repoPath)
        exec('git --git-dir ' + app.repoPath + ' --bare init', function (err) {
            if (err) {
                warn(err)
            } else {
                log('create bare repo at ' + app.repoPath.yellow)
                // add post-receive hook
                createHook(appname, app.repoPath, app.workPath)
                // create working copy
                exec('git clone ' + app.repoPath + ' ' + app.workPath, function (err) {
                    if (err) {
                        warn(err)
                    } else {
                        log('create empty working copy at ' + app.workPath.yellow)
                    }
                })
            }
        })

    },

    rm: function (appname) {

        if (!appname) return

        var app = getAppInfo(appname)

        prompt('Really delete app \'' + appname + '\'? (y/n)', function (res) {
            if (res === 'y') {
                // stop it first
                pod.stop(appname)
                // fs.rmdir can't -rf
                exec('rm -rf ' +
                    app.configPath + ' ' +
                    app.repoPath + ' ' +
                    app.workPath + ' ' +
                    app.logPath,
                function (err) {
                    if (err) {
                        warn(err)
                    } else {
                        log('deleted app: ' + appname.yellow)
                    }
                })
            }
        })
    },

    cleanlogs: function (appname) {
        var logDir = getAppInfo(appname).logPath
        if (!fs.existsSync(logDir)) {
            warn('cannot find log directory for ' + appname)
            return
        }
        clean('forever.log')
        clean('stderr.log')
        clean('stdout.log')
        var total = 3
        function clean (file) {
            file = logDir + '/' + file
            fs.exists(file, function (exist) {
                if (exist) {
                    fs.writeFile(file, 'restart at ' + Date.now() + '\n', 'utf-8', function (err) {
                        if (!err) {
                            done()
                        } else {
                            warn(err)
                        }
                    })
                } else done()
            })
        }
        function done () {
            total--
            if (!total) log('cleaned logs for ' + appname.yellow)
        }
    },

    edit: function (appname) {
        if (!appname) return
        edit(getAppInfo(appname).repoPath + '/hooks/post-receive')
    },

    list: function () {

        var apps = findApps()
        if (!apps.length) {
            console.log('no apps found.')
            return
        }

        if (argv.p) {
            forever.list(true, function (err, info) {
                console.log(info ? info : 'no processes found.')
            })
            return
        }

        forever.list(false, function (err, list) {
            if (err) {
                warn(err)
            } else {
                var longest = getLongestName(apps)
                apps.forEach(function (appname) {
                    var app = getAppInfo(appname),
                        port = ' : ' + (app.config.port || sniffPort(app.script) || 'unknown port'),
                        status = isRunning(list, app.script) ? 'ON'.green : 'OFF'.red
                    console.log('⚑ ' + appname.yellow + spaces(longest - appname.length) + ' - ' + status + port)
                })
            }
        })

    },

    start: function (appname, list) {
        if (!appname) return

        var app = getAppInfo(appname)

        if (!fs.existsSync(app.script)) {
            warn('cannot locate main script for ' + appname.yellow)
            return
        }

        if (list && list.length) {
            run()
        } else {
            forever.list(false, function (err, procs) {
                if (err) {
                    warn(err)
                } else {
                    list = procs
                    run()
                }
            })
        }

        function run () {
            if (isRunning(list, app.script)) {
                console.log(appname + ' already running.')
            } else {
                // apply configs
                if (app.config.port) process.env.PORT = argv.port || app.config.port
                process.env.NODE_ENV = argv.env || app.config.env || globalConfig.env

                // start daemon
                forever.startDaemon(app.script, {
                    max: 3,
                    logFile: app.logPath + '/forever.log',
                    errFile: app.logPath + '/stderr.log',
                    outFile: app.logPath + '/stdout.log',
                    append: true
                })
                var port = app.config.port || sniffPort(app.script)
                log(appname.yellow + ' running' + (port ? (' on port ' + port) : ''))
            }
        }
    },

    stop: function (appname) {
        if (!appname) return

        var app = getAppInfo(appname),
            runner = forever.stop(app.script)

        runner.on('stop', function () {
            log(appname.yellow + ' stopped.')
        })

        runner.on('error', function () {
            log(appname.yellow + ' is not running.')
        })
    },

    restart: function (appname) {
        if (!appname) return

        var app = getAppInfo(appname),
            runner = forever.restart(app.script)

        runner.on('restart', function () {
            log(appname.yellow + ' restarted.')
        })

        runner.on('error', function (err) {
            console.log(err)
            log(appname.yellow + ' is not running, starting instead...')
            pod.start(appname)
        })

    },

    startall: function () {
        forever.list(false, function (err, list) {
            if (err) {
                warn(err)
            } else {
                var apps = findApps()
                if (!apps.length) {
                    console.log('no apps found.')
                    return
                }
                apps.forEach(function (appname) {
                    pod.start(appname, list)
                })      
            }
        })
    },

    stopall: function () {
        var runner = forever.stopAll()
        runner.on('stopAll', function (processes) {
            if (processes && processes.length) {
                var appnameRE = new RegExp(globalConfig.dir + '/apps/(.+)/.+\.js\b')
                log('stopped:')
                processes.forEach(function (p) {
                    var match = p.file.match(appnameRE)
                    if (match) console.log('⚑ ' + match[1].yellow)
                })
            } else {
                console.log('no app is running.');
            }
        })
        runner.on('error', function (err) {
            console.log('no app is running.')
        })
    },

    restartall: function () {
        var runner = forever.restartAll()
        runner.on('restartAll', function (processes) {
            if (processes && processes.length) {
                var appnameRE = new RegExp(globalConfig.dir + '/apps/(.+)/.+\.js\b')
                log('restarted:')
                processes.forEach(function (p) {
                    var match = p.file.match(appnameRE)
                    if (match) console.log('⚑ ' + match[1].yellow)
                })
            } else {
                console.log('no app is running.');
            }
        })
        runner.on('error', function (err) {
            console.log('no app is running.')
        })
    }

}

// INIT
function init () {
    if (fs.existsSync(globalConfigPath)) {
        globalConfig = JSON.parse(fs.readFileSync(globalConfigPath, 'utf-8'))
        parseCommand()
    } else {
        console.log('No global config file found.')
        initConfig()
    }
}

function initConfig () {
    prompt('Where do you want Pod to keep all its stuff?', function (res) {
        res = path.resolve(cwd, res)
        if (fs.existsSync(res) && isDir(res)) {
            globalConfig.dir = res
            // default values
            globalConfig.env = 'development'
            globalConfig.script = 'app.js'
            globalConfig.editor = process.env.VISUAL || process.env.EDITOR || 'vi'

            if (!fs.existsSync(configPath)) {
                fs.mkdirSync(configPath)
                fs.mkdirSync(configPath + '/app-configs')
            }

            setConfig(null, config, function () {
                log('write global config file: ' + globalConfigPath.yellow)
                var apps = globalConfig.dir + '/apps',
                    repos = globalConfig.dir + '/repos'
                    logs = globalConfig.dir + '/logs'
                if (!fs.existsSync(apps)) fs.mkdirSync(apps)
                if (!fs.existsSync(repos)) fs.mkdirSync(repos)
                if (!fs.existsSync(logs)) fs.mkdirSync(logs)
            })
        } else {
            console.log('invalid path.')
            initConfig()
        }
    })
}

function parseCommand () {

    var command = argv._[0] || 'help'

    if (pod[command]) {
        if (foreverTasks.indexOf(command) !== -1) {
            forever = require('forever/lib/forever')
        }
        pod[command](argv._[1], argv._[2])
    } else {
        if (command) {
            warn('unknown command ' + command.red)
        }
    }

}

// TODO make this read all existing hooks in ../hooks
function createHook (appname, repo, work) {
    var hook = repo + '/hooks/post-receive'
    var data = fs.readFileSync(__dirname + '/../hooks/post-receive', 'utf-8')
        .replace(/\{\{pod_dir\}\}/g, globalConfig.dir)
        .replace(/\{\{app\}\}/g, appname)

    fs.writeFile(hook, data, function (err) {
        if (err) {
            warn(err)
        } else {
            fs.chmodSync(hook, '0777')
        }
    })
}

function setConfig (app, options, callback) {
    
    var file = app ?  (configPath + '/app-configs/' + app) : globalConfigPath,
        current = app ? JSON.parse(fs.readFileSync(file, 'utf-8')) : globalConfig 
    for (var op in options) {
        if (op in current) current[op] = options[op]
    }

    fs.writeFile(file, JSON.stringify(current, null, 4), function (err) {
        if (err) {
            warn(err)
        } else {
            if (callback) callback()
        }
    })
}

function findApps () {
    return fs.readdirSync(globalConfigDirPath + '/app-configs')
}

function getAppInfo (app, creating) {
    var info = {
        configPath  : globalConfigDirPath + '/app-configs/' + app,
        repoPath    : globalConfig.dir + '/repos/' + app + '.git',
        workPath    : globalConfig.dir + '/apps/' + app,
        logPath     : globalConfig.dir + '/logs/' + app
    }
    if (!creating) {
        info.config = readJSON(info.configPath)
        if (!info.config) {
            warn('app ' + app.yellow + ' doesn\'t seem to exist.')
            process.exit(-1)
        }
        info.script = info.workPath + '/' + (argv.script || info.config.script || globalConfig.script)
    }
    return info
}

function readJSON (file) {
    if (!fs.existsSync(file)) {
        return null
    } else {
        return JSON.parse(fs.readFileSync(file, 'utf-8'))
    }
}

function sniffPort (script) {
    if (fs.existsSync(script)) {
        // sniff port
        var content = fs.readFileSync(script, 'utf-8'),
            port = content.match(/\.listen\(.*(\d\d\d\d\d?).*\)/)[1]
        return port ? port : ''
    } else {
        return ''
    }
}

function isRunning(list, script) {
    if (!list || !list.length) return false
    for (var i = 0, j = list.length; i < j; i++) {
        if (list[i].file === script) {
            return true
        }
    }
}

function isDir (path) {
    return fs.statSync(path).isDirectory()
}

function prompt (msg, callback) {
    console.log(msg)
    process.stdin.resume()
    process.stdin.setEncoding('utf8')
    process.stdin.on('data', function (input) {
        process.stdin.pause()
        callback(input.replace(/\n/g, ''))
    })
}

function log (msg) {
    console.log('[pod] '.green + msg)
}

function warn (msg) {
    console.warn('error: '.red + msg)
}

function spaces (length) {
    if (length < 0) return ''
    var ret = ''
    while (length--) {
        ret += ' '
    }
    return ret
}

function getLongestName (apps) {
    var longest = 0
    apps.forEach(function (a) {
        if (a.length > longest) longest = a.length
    })
    return longest
}

function edit (file, callback) {
    process.stdin.setRawMode(true)
    var p = spawn(globalConfig.editor, [file], {
        customFds: [ 0, 1, 2 ]
    })
    p.on('exit', function () {
        process.stdin.setRawMode(false)
        callback && callback()
    })
}

init()